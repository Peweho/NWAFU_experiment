options {
  STATIC = false; // 是否生成静态解析器
}

// 定义语法规则
PARSER_BEGIN(Semantics)
package Semantics;

import util.*;import java.io.FileOutputStream;import java.util.Hashtable;import java.util.ArrayList;import java.io.FileInputStream;import java.io.FileNotFoundException;
public class Semantics {
        public QTList qtList = new QTList();
        public int loop = 0;
        protected SimpleCharStream input_stream;

        public void printQTTable(FileOutputStream out){
                qtList.printQTTable(out);
        }
        public static void main(String[] args) throws ParseException , FileNotFoundException{
            String dir = "./src/testFile/";
            FileInputStream in = new FileInputStream(dir.concat("test.txt"));
            FileOutputStream out1 = new FileOutputStream(dir.concat("词法分析.txt"));
            FileOutputStream out2 = new FileOutputStream(dir.concat("语法分析.txt"));
            FileOutputStream out3 = new FileOutputStream(dir.concat("语义分析.txt"));

        try
        {//词法分析
            System.out.println("词法分析开始");
            SimpleCharStream scs = new SimpleCharStream(in);
            SemanticsTokenManager tm = new SemanticsTokenManager(scs);
            Token t = tm.getNextToken();
                while(t.kind != 0) {
                    String line = "<" + t.kind + "," + t.image + ">\n";
                    out1.write(line.getBytes());
                    //System.out.println("<" + t.kind + "," + t.image + ">");
                    t = tm.getNextToken();
                }
                System.out.println("词法分析结束");
                //语法分析
          in.close();
          FileInputStream inn = new FileInputStream(dir.concat("test.txt"));
          Semantics parser = new Semantics(inn);
          System.out.println("语法分析开始");
          SimpleNode n = parser.Start();
          n.dump("=",out2);
          System.out.println("语法分析结束");
          ErrorInfo.printErrorInfo();
          //语义分析
          System.out.println("语义分析开始");
          parser.printQTTable(out3);
          System.out.println("语义分析结束");
          System.out.println("Thank you.");
        }
        catch (Exception e)
        {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
        }
                out1.close();
                out2.close();
                out3.close();
  }
}


PARSER_END(Semantics)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])?
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /*KEYWORDS*/
{
  < IF : "if" > |
  < ELSE : "else" > |
  < INT : "int" > |
  < RETURN : "return" > |
  < DO : "do" > |
  < WHILE : "while" > |
  < STRUCT : "struct" > |
  < VOID : "void" > |
  < DOUBLE : "double"> |
  < FLOAT : "float" > |
  < BREAK : "break" > |
  <CONTINUE : "continue" > |
  < SWITCH : "switch"> |
  < CASE : "case"> |
  < SWITCH_DEFAULT : "default" > |
  < FOR : "for" >


}

TOKEN : /*operators*/
{
  < ADD : "+" > |
  < MUL : "*" > |
  < SUB : "-" > |
  < DIV : "/" > |
  < GIVE : "&" > |
  < PERHAPS : "|" > |
  < NOT : "!"> |
  < AND : "&&"> |
  < OR : "||"> |
  < SELFADD : "++"> |
  < SELFSUB : "--">
}

TOKEN : /*operators*/
{
  < RELATION_OPERATORS :  < GREAT> |
                           < LESS > |
                           < EQUAL > | <GE> | <LE> > |
  < #GREAT : ">" > |
  < #LESS : "<" > |
  < #EQUAL : "==" > |
  < #GE : ">="> |
  < #LE : "<=">
}

TOKEN : /*separators*/
{
  < COMMA : "," > |
  < SEMI : ";" > |
  < SLBRACKET : "(" > |
  < SRBRACKET : ")" > |
  < MLBRACKET : "[" > |
  < MRBRACKET : "]" > |
  < LLBRACKET : "{" > |
  < LRBRACKET : "}" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}


SimpleNode Start() :
{}
{
  Program()
  {
    return jjtThis;
  }
}

void Program() :
{}
{
    Type() Identifier() "(" ")" "{" (SentenceBlock())* "}"
}

int SentenceBlock():
{int index = 0;
int ans = 0;}
{
    index = Sentence() {return index;}|
    "{" (index = SentenceBlock(){if (index != 0 && ans == 0) ans = index;})* "}" {return ans;}
}

int Sentence() :
{Token t = null;}
{
    t = "break" ";"
    {
        if (loop <= 0){
            loop += 1;
            new ErrorInfo(ErrorInfo.dont_shoule_appear,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),t.image);
        }
        loop -= 1;
        qtList.addQTInfo(new QTInfo("j","_","_","s"));
        return QTInfo.size;
    }|
    t = "continue" ";"
    {
        if (loop <= 0){
            new ErrorInfo(ErrorInfo.dont_shoule_appear,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),t.image);
        }
        qtList.addQTInfo(new QTInfo("j","_","_","s"));
        return -QTInfo.size;
    }
    |    SequenceSentence() {return 0;}|
         ConditionSentence() {return 0;}|
         LoopSentence() {return 0;}
}

void SequenceSentence():
{}
{
    (StatementSentence() |
     AssignmentSentence(false) ) ";"
}

void StatementSentence() :
{String ch = null;
String type = null;}
{
    type = Type() (LOOKAHEAD(2) ch = AssignmentSentence(true) | ch = Identifier())
    {
        if (!(OptionTable.ot.containsKey(ch)))
            OptionTable.ot.put(ch,type);
        else
            new ErrorInfo(ErrorInfo.variable_duplicate_declaration,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),ch);
    }
     ("," ( LOOKAHEAD(2) ch = AssignmentSentence(true) | ch = Identifier())
         {
             if (!(OptionTable.ot.containsKey(ch)))
                 OptionTable.ot.put(ch,type);
             else
                 new ErrorInfo(ErrorInfo.variable_duplicate_declaration,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),ch);
         }
     )*
}

String Type() :
{Token type = null;}
{
    (type = <INT> |
    type = <DOUBLE> |
    type = <VOID> |
    type = <FLOAT>)
    {return type.image;}
}

String AssignmentSentence(Boolean isState):
{
    String arg1 = null;
    String result = null;
    Token op = null;
    Boolean prev = true;
    String fu = null;
}
{
    (result = Identifier()
    {
        if( !isState && (!(OptionTable.ot.containsKey(result))))
            new ErrorInfo(ErrorInfo.variable_not_define,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),result);
    }
    ("="
    arg1 = Expression(result)
    {
        if (arg1 != null){
            QTInfo qtInfo = new  QTInfo("=",arg1,"_",result);
            qtList.addQTInfo(qtInfo);
        }
    }
    |
    ( op = "++" | op = "--")
    {
        arg1 = result;
        prev = false;
        if (op.image.equals("++"))
            fu = "+";
        else
            fu = "-";
        String T = VariableNameGenerator.genVariableName();
        qtList.addQTInfo(new QTInfo(fu,arg1,"1",T));
        qtList.addQTInfo(new QTInfo("=",T,"_",arg1));
    })
    |
    ( op = "++" | op =  "--") arg1 = Identifier()
    {
        if (op.image.equals("++"))
            fu = "+";
        else
            fu = "-";
        String T = VariableNameGenerator.genVariableName();
        qtList.addQTInfo(new QTInfo(fu,arg1,"1",T));
        qtList.addQTInfo(new QTInfo("=",T,"_",arg1));
    })

    {return result;}
}

void ConditionSentence():
{ConditionValue cValue = new ConditionValue();
int index = 0;
ConditionValue switchCvalue = new ConditionValue();
String switch_char = null;
Token switch_case = null;}
{
    <IF> "(" cValue = Condition() ")"
    {
        cValue.backpatchTrueChain(QTInfo.size + 1);
    }
    SentenceBlock()
    {
        cValue.backpatchFalseChain(QTInfo.size+1);
    }
    (
        LOOKAHEAD(1)
        <ELSE>
        {
            QTInfo qtInfo = new QTInfo("j","_","_","");
            qtList.addQTInfo(qtInfo);
            index = QTInfo.size;
            cValue.backpatchFalseChain(QTInfo.size+1);
        }
        SentenceBlock()
        {
           QTInfo qtinfo = qtList.get(index-1);
           qtinfo.setResult(QTInfo.size+1);
        }
    )?
    | "switch" "(" switch_char = Identifier() ")" "{"
         ("case" switch_case = <INTEGER_LITERAL> ":"
         {
             if (switchCvalue.getMergeFalseLength() != 0){
                 switchCvalue.backpatchFalseChain(QTInfo.size+1);
                 switchCvalue.RemoveMergeFalse();
             }
             QTInfo qtInfoT = new QTInfo("j==",switch_char,switch_case.image,QTInfo.size+3);
             QTInfo qtInfoF = new QTInfo("j","_","_","F");
             qtList.addQTInfo(qtInfoT);
             qtList.addQTInfo(qtInfoF);
             switchCvalue.mergeFalse(qtInfoF);
         } SentenceBlock() )+
         {
            switchCvalue.backpatchFalseChain(QTInfo.size+1);
         }
         ( "default" ":" SentenceBlock() )? "}"
}

ConditionValue Condition():
{Token op = null;
String e1 = null;
String e2 = null;
ConditionValue cValue = new ConditionValue();
}
{
    e1 = Expression("") (op =  <RELATION_OPERATORS> e2 = Expression(""))?
    {
    if (op == null) {
        QTInfo qtInfo = new QTInfo("jnz",e1,"_","T");
        qtList.addQTInfo(qtInfo);
        cValue.mergeTrue(qtInfo);
    }else{
        QTInfo qtInfo = new QTInfo("j".concat(op.image),e1,e2,"T");
        qtList.addQTInfo(qtInfo);
        cValue.mergeTrue(qtInfo);
    }

    QTInfo qtInfo1 = new QTInfo("j","_","_","F");
    qtList.addQTInfo(qtInfo1);
    cValue.mergeFalse(qtInfo1);
}
    {
        return cValue;
    }
}

//while do-while for
void LoopSentence():
{ConditionValue cValue = null;
int index = -1;
int threeConditionIndex = -1;
QTList qtList1 = new QTList();
Boolean first = false;
String ch = null;
String type = null;
int breakIndex = -1;}
{
    "while" "("
    {
        loop += 1;
        index = QTInfo.size;
    }
    cValue = Condition() ")"
    {
        cValue.backpatchTrueChain(QTInfo.size + 1);
    }
    breakIndex = SentenceBlock()
    {
       qtList.addQTInfo(new QTInfo("j","_","_",index+1));
       cValue.backpatchFalseChain(QTInfo.size + 1);
       if (breakIndex > 0){
           qtList.QTList.get(breakIndex-1).setResult(QTInfo.size + 1);
           return;
       } else if(breakIndex < 0){
           qtList.QTList.get((-breakIndex)-1).setResult(index+1);
       }
       loop -= 1;
    }
    | "do" {loop += 1;index = QTInfo.size;} "{" (breakIndex = SentenceBlock())+ "}" "while" "(" cValue = Condition() ")" ";"
    {
        cValue.backpatchTrueChain(index + 1);
        cValue.backpatchFalseChain(QTInfo.size + 1);
        if (breakIndex > 0){
            qtList.QTList.get(breakIndex-1).setResult(QTInfo.size + 1);
            return;
        } else if(breakIndex < 0){
            qtList.QTList.get((-breakIndex)-1).setResult(index+1);
        }
        loop -= 1;
    }
    | "for" "(" ( (type = Type() {first=true;})? ch = AssignmentSentence(first) {
        if (first){
            if (!(OptionTable.ot.containsKey(ch)))
                OptionTable.ot.put(ch,type);
            else
                new ErrorInfo(ErrorInfo.variable_duplicate_declaration,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),ch);
        }
    })? ";"
    ({index = QTInfo.size;} cValue = Condition() )? ";"
    ( {threeConditionIndex = QTInfo.size;} AssignmentSentence(false)
    {
        for(int i=QTInfo.size-1;i>=threeConditionIndex;i--)
        {
            qtList1.addQTInfo(qtList.get(i));
            qtList.QTList.remove(i);
            QTInfo.size -= 1;
        }
    })?
    ")"
    {
        loop += 1;
        //记录语句块第一个四元式，为强制跳转做准备
        if (index == -1)
            index = QTInfo.size;
        //回填条件真出口
        if (cValue != null)
            cValue.backpatchTrueChain(QTInfo.size + 1);
    }
    breakIndex = SentenceBlock()
    {
        //第三个表达式的地址
        int k = 0;
        //添加for循环第三个条件
        if (threeConditionIndex != -1)
            k = QTInfo.size+1;
            for(int i=qtList1.QTList.size()-1;i>=0;i--){
                QTInfo q = qtList1.get(i);
                q.setInnerId(QTInfo.size+1);
                qtList.addQTInfo(q);
                QTInfo.size += 1;
            }
        //结束后强制跳转
        qtList.addQTInfo(new QTInfo("j","_","_",index+1));
        //回填条件假出口
        if (cValue != null)
            cValue.backpatchFalseChain(QTInfo.size + 1);
        if (breakIndex > 0){
            qtList.QTList.get(breakIndex-1).setResult(QTInfo.size + 1);
        } else if(breakIndex < 0){
            qtList.QTList.get((-breakIndex)-1).setResult(k);
        }
        loop -= 1;
    }
}


String Expression(String j) :
{String s = null;
Token op = null;
String arg1 = null;
//前缀为True，后缀为False
Boolean prev = true;
String fu = null;}
{
(
   LOOKAHEAD(2)
  s = AdditiveExpression()
  |
  ( arg1 = Identifier() ( op = "++" | op = "--") {prev = false;} | ( op = "++" | op =  "--") arg1 = Identifier())
  {
       //j = ++i (+,i,1,T) (=,T,_,i) (=,i,_,j)
       //j = i++ (=,i,_,j) (+,i,1,T) (=,T,_,i)
      if (op.image.equals("++"))
          fu = "+";
      else
          fu = "-";
      if (prev){
          String T = VariableNameGenerator.genVariableName();
          qtList.addQTInfo(new QTInfo(fu,arg1,"1",T));
          qtList.addQTInfo(new QTInfo("=",T,"_",arg1));
          s = arg1;
      } else {
          qtList.addQTInfo(new QTInfo("=",arg1,"_",j));
          String T = VariableNameGenerator.genVariableName();
          qtList.addQTInfo(new QTInfo(fu,arg1,"1",T));
          qtList.addQTInfo(new QTInfo("=",T,"_",arg1));
      }
  }
  )

  {return s;}
}

String AdditiveExpression() :
{String arg1 = null;
 String arg2 = null;
 String T1 = null;
 Token arg0 = null;}
{
  arg1 = MultiplicativeExpression()
  {T1 = arg1;}
  (
    (
     arg0 =  "+"
    | arg0 =  "-"
    )
   arg2 =  MultiplicativeExpression()
   {
         T1 = VariableNameGenerator.genVariableName();
         QTInfo qtInfo = new  QTInfo(arg0.image,arg1,arg2,T1);
         qtList.addQTInfo(qtInfo);
         arg1 = T1;
       }
  )*
  {
      return T1;
     }
}

String MultiplicativeExpression() :
{String arg1 = null;
String arg2 = null;
String T1 = null;
Token arg0 = null;}
{
  arg1 = UnaryExpression()
  {T1 = arg1;}
  (
    (
     arg0 =  "*"
    | arg0 =  "/"
    | arg0 =  "%"
    )
    arg2 = UnaryExpression()
    {
        T1 = VariableNameGenerator.genVariableName();
        QTInfo qtInfo = new  QTInfo(arg0.image,arg1,arg2,T1);
        qtList.addQTInfo(qtInfo);
        arg1 = T1;
    }
  )*
  {
    return T1;
   }
}

String UnaryExpression() :
{String s = null;}
{
(  "(" s = Expression("") ")"
 | s = Identifier()
 | s = Integer()
 )
    {return s;}
}
//false为声明语句，true为其他语句
String Identifier() :
{ Token t = null;}
{
  t = < IDENTIFIER >
  {
//    if(type){
//        if(!OptionTable.ot.containsKey(t.image)){
//            new ErrorInfo(ErrorInfo.variable_not_define,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),t.image);
//        }
//    }else {
//        if(OptionTable.ot.containsKey(t.image)){
//            new ErrorInfo(ErrorInfo.variable_duplicate_declaration,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),t.image);
//        }
//    }
    return t.image;
  }
}

String Integer() :
{Token t = null;}
{
  t = < INTEGER_LITERAL >
  {
    return t.image;
    }
}