/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\Semantics.jj */
/*@egen*/options {
  STATIC = false; // \u93c4\ue21a\u60c1\u9422\u71b8\u579a\u95c8\u6b10\ufffd\u4f7d\u0412\u93cb\u612c\u6ad2
}

// \u7039\u6c2b\u7b9f\u7487\ue15f\u7876\u7459\u52eb\u57af
PARSER_BEGIN(Semantics)
package Semantics;

import util.*;import java.io.FileOutputStream;import java.util.Hashtable;import java.util.ArrayList;import java.io.FileInputStream;import java.io.FileNotFoundException;
public class Semantics/*@bgen(jjtree)*/implements SemanticsTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSemanticsState jjtree = new JJTSemanticsState();

/*@egen*/
        public QTList qtList = new QTList();
        public int loop = 0;
        protected SimpleCharStream input_stream;

        public void printQTTable(FileOutputStream out){
                qtList.printQTTable(out);
        }
        public static void main(String[] args) throws ParseException , FileNotFoundException{
            String dir = "./src/testFile/";
            FileInputStream in = new FileInputStream(dir.concat("test.txt"));
            FileOutputStream out1 = new FileOutputStream(dir.concat("\u7487\u5d86\u7876\u9352\u55d8\u703d.txt"));
            FileOutputStream out2 = new FileOutputStream(dir.concat("\u7487\ue15f\u7876\u9352\u55d8\u703d.txt"));
            FileOutputStream out3 = new FileOutputStream(dir.concat("\u7487\ue15d\u7b9f\u9352\u55d8\u703d.txt"));

        try
        {//\u7487\u5d86\u7876\u9352\u55d8\u703d
            System.out.println("\u7487\u5d86\u7876\u9352\u55d8\u703d\u5bee\ufffd\u6fee\ufffd");
            SimpleCharStream scs = new SimpleCharStream(in);
            SemanticsTokenManager tm = new SemanticsTokenManager(scs);
            Token t = tm.getNextToken();
                while(t.kind != 0) {
                    String line = "<" + t.kind + "," + t.image + ">\n";
                    out1.write(line.getBytes());
                    //System.out.println("<" + t.kind + "," + t.image + ">");
                    t = tm.getNextToken();
                }
                System.out.println("\u7487\u5d86\u7876\u9352\u55d8\u703d\u7f01\u64b4\u6f6b");
                //\u7487\ue15f\u7876\u9352\u55d8\u703d
          in.close();
          FileInputStream inn = new FileInputStream(dir.concat("test.txt"));
          Semantics parser = new Semantics(inn);
          System.out.println("\u7487\ue15f\u7876\u9352\u55d8\u703d\u5bee\ufffd\u6fee\ufffd");
          SimpleNode n = parser.Start();
          n.dump("=",out2);
          System.out.println("\u7487\ue15f\u7876\u9352\u55d8\u703d\u7f01\u64b4\u6f6b");
          ErrorInfo.printErrorInfo();
          //\u7487\ue15d\u7b9f\u9352\u55d8\u703d
          System.out.println("\u7487\ue15d\u7b9f\u9352\u55d8\u703d\u5bee\ufffd\u6fee\ufffd");
          parser.printQTTable(out3);
          System.out.println("\u7487\ue15d\u7b9f\u9352\u55d8\u703d\u7f01\u64b4\u6f6b");
          System.out.println("Thank you.");
        }
        catch (Exception e)
        {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
        }
                out1.close();
                out2.close();
                out3.close();
  }
}


PARSER_END(Semantics)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])?
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /*KEYWORDS*/
{
  < IF : "if" > |
  < ELSE : "else" > |
  < INT : "int" > |
  < RETURN : "return" > |
  < DO : "do" > |
  < WHILE : "while" > |
  < STRUCT : "struct" > |
  < VOID : "void" > |
  < DOUBLE : "double"> |
  < FLOAT : "float" > |
  < BREAK : "break" > |
  <CONTINUE : "continue" > |
  < SWITCH : "switch"> |
  < CASE : "case"> |
  < SWITCH_DEFAULT : "default" > |
  < FOR : "for" >


}

TOKEN : /*operators*/
{
  < ADD : "+" > |
  < MUL : "*" > |
  < SUB : "-" > |
  < DIV : "/" > |
  < GIVE : "&" > |
  < PERHAPS : "|" > |
  < NOT : "!"> |
  < AND : "&&"> |
  < OR : "||"> |
  < SELFADD : "++"> |
  < SELFSUB : "--">
}

TOKEN : /*operators*/
{
  < RELATION_OPERATORS :  < GREAT> |
                           < LESS > |
                           < EQUAL > | <GE> | <LE> > |
  < #GREAT : ">" > |
  < #LESS : "<" > |
  < #EQUAL : "==" > |
  < #GE : ">="> |
  < #LE : "<=">
}

TOKEN : /*separators*/
{
  < COMMA : "," > |
  < SEMI : ";" > |
  < SLBRACKET : "(" > |
  < SRBRACKET : ")" > |
  < MLBRACKET : "[" > |
  < MRBRACKET : "]" > |
  < LLBRACKET : "{" > |
  < LRBRACKET : "}" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}


SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Program()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Program() :
{/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    Type() Identifier() "(" ")" "{" (SentenceBlock())* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
int SentenceBlock():
{/*@bgen(jjtree) SentenceBlock */
 SimpleNode jjtn000 = new SimpleNode(JJTSENTENCEBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/int index = 0;
int ans = 0;}
{/*@bgen(jjtree) SentenceBlock */
    try {
/*@egen*/
    index = Sentence()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {return index;}|
    "{" (index = SentenceBlock(){if (index != 0 && ans == 0) ans = index;})* "}"/*@bgen(jjtree)*/
                                                                                 {
                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;
                                                                                 }
/*@egen*/ {return ans;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

int Sentence() :
{/*@bgen(jjtree) Sentence */
 SimpleNode jjtn000 = new SimpleNode(JJTSENTENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) Sentence */
    try {
/*@egen*/
    t = "break" ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if (loop <= 0){
            new ErrorInfo(ErrorInfo.dont_shoule_appear,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),t.image);
        }
        loop -= 1;
        qtList.addQTInfo(new QTInfo("j","_","_","s"));
        return QTInfo.size;
    }|
    t = "continue" ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if (loop <= 0){
            new ErrorInfo(ErrorInfo.dont_shoule_appear,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),t.image);
        }
        qtList.addQTInfo(new QTInfo("j","_","_","s"));
        return -QTInfo.size;
    }
    |    SequenceSentence()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {return 0;}|
         ConditionSentence()/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {return 0;}|
         LoopSentence()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return 0;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SequenceSentence():
{/*@bgen(jjtree) SequenceSentence */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCESENTENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SequenceSentence */
    try {
/*@egen*/
    (StatementSentence() |
     AssignmentSentence(false) ) ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StatementSentence() :
{/*@bgen(jjtree) StatementSentence */
 SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTSENTENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String ch = null;
String type = null;}
{/*@bgen(jjtree) StatementSentence */
    try {
/*@egen*/
    type = Type() (LOOKAHEAD(2) ch = AssignmentSentence(true) | ch = Identifier())
    {
        if (!(OptionTable.ot.containsKey(ch)))
            OptionTable.ot.put(ch,type);
        else
            new ErrorInfo(ErrorInfo.variable_duplicate_declaration,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),ch);
    }
     ("," ( LOOKAHEAD(2) ch = AssignmentSentence(true) | ch = Identifier())
         {
             if (!(OptionTable.ot.containsKey(ch)))
                 OptionTable.ot.put(ch,type);
             else
                 new ErrorInfo(ErrorInfo.variable_duplicate_declaration,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),ch);
         }
     )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Type() :
{/*@bgen(jjtree) Type */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token type = null;}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    (type = <INT> |
    type = <DOUBLE> |
    type = <VOID> |
    type = <FLOAT>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return type.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String AssignmentSentence(Boolean isState):
{/*@bgen(jjtree) AssignmentSentence */
    SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTSENTENCE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String arg1 = null;
    String result = null;
    Token op = null;
    Boolean prev = true;
    String fu = null;
}
{/*@bgen(jjtree) AssignmentSentence */
    try {
/*@egen*/
    (result = Identifier()
    {
        if( !isState && (!(OptionTable.ot.containsKey(result))))
            new ErrorInfo(ErrorInfo.variable_not_define,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),result);
    }
    ("="
    arg1 = Expression(result)
    {
        if (arg1 != null){
            QTInfo qtInfo = new  QTInfo("=",arg1,"_",result);
            qtList.addQTInfo(qtInfo);
        }
    }
    |
    ( op = "++" | op = "--")
    {
        arg1 = result;
        prev = false;
        if (op.image.equals("++"))
            fu = "+";
        else
            fu = "-";
        String T = VariableNameGenerator.genVariableName();
        qtList.addQTInfo(new QTInfo(fu,arg1,"1",T));
        qtList.addQTInfo(new QTInfo("=",T,"_",arg1));
    })
    |
    ( op = "++" | op =  "--") arg1 = Identifier()
    {
        if (op.image.equals("++"))
            fu = "+";
        else
            fu = "-";
        String T = VariableNameGenerator.genVariableName();
        qtList.addQTInfo(new QTInfo(fu,arg1,"1",T));
        qtList.addQTInfo(new QTInfo("=",T,"_",arg1));
    })/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {return result;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ConditionSentence():
{/*@bgen(jjtree) ConditionSentence */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONSENTENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ConditionValue cValue = new ConditionValue();
int index = 0;
ConditionValue switchCvalue = new ConditionValue();
String switch_char = null;
Token switch_case = null;}
{/*@bgen(jjtree) ConditionSentence */
    try {
/*@egen*/
    <IF> "(" cValue = Condition() ")"
    {
        cValue.backpatchTrueChain(QTInfo.size + 1);
    }
    SentenceBlock()
    {
        cValue.backpatchFalseChain(QTInfo.size+1);
    }
    (
        LOOKAHEAD(1)
        <ELSE>
        {
            QTInfo qtInfo = new QTInfo("j","_","_","");
            qtList.addQTInfo(qtInfo);
            index = QTInfo.size;
            cValue.backpatchFalseChain(QTInfo.size+1);
        }
        SentenceBlock()
        {
           QTInfo qtinfo = qtList.get(index-1);
           qtinfo.setResult(QTInfo.size+1);
        }
    )?
    | "switch" "(" switch_char = Identifier() ")" "{"
         ("case" switch_case = <INTEGER_LITERAL> ":"
         {
             if (switchCvalue.getMergeFalseLength() != 0){
                 switchCvalue.backpatchFalseChain(QTInfo.size+1);
                 switchCvalue.RemoveMergeFalse();
             }
             QTInfo qtInfoT = new QTInfo("j==",switch_char,switch_case.image,QTInfo.size+3);
             QTInfo qtInfoF = new QTInfo("j","_","_","F");
             qtList.addQTInfo(qtInfoT);
             qtList.addQTInfo(qtInfoF);
             switchCvalue.mergeFalse(qtInfoF);
         } SentenceBlock() )+
         {
            switchCvalue.backpatchFalseChain(QTInfo.size+1);
         }
         ( "default" ":" SentenceBlock() )? "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

ConditionValue Condition():
{/*@bgen(jjtree) Condition */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token op = null;
String e1 = null;
String e2 = null;
ConditionValue cValue = new ConditionValue();
}
{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    e1 = Expression("") (op =  <RELATION_OPERATORS> e2 = Expression(""))?
    {
    if (op == null) {
        QTInfo qtInfo = new QTInfo("jnz",e1,"_","T");
        qtList.addQTInfo(qtInfo);
        cValue.mergeTrue(qtInfo);
    }else{
        QTInfo qtInfo = new QTInfo("j".concat(op.image),e1,e2,"T");
        qtList.addQTInfo(qtInfo);
        cValue.mergeTrue(qtInfo);
    }

    QTInfo qtInfo1 = new QTInfo("j","_","_","F");
    qtList.addQTInfo(qtInfo1);
    cValue.mergeFalse(qtInfo1);
}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return cValue;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//while do-while for
void LoopSentence():
{/*@bgen(jjtree) LoopSentence */
 SimpleNode jjtn000 = new SimpleNode(JJTLOOPSENTENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ConditionValue cValue = null;
int index = -1;
int threeConditionIndex = -1;
QTList qtList1 = new QTList();
Boolean first = false;
String ch = null;
String type = null;
int breakIndex = -1;}
{/*@bgen(jjtree) LoopSentence */
    try {
/*@egen*/
    "while" "("
    {
        loop += 1;
        index = QTInfo.size;
    }
    cValue = Condition() ")"
    {
        cValue.backpatchTrueChain(QTInfo.size + 1);
    }
    breakIndex = SentenceBlock()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
       qtList.addQTInfo(new QTInfo("j","_","_",index+1));
       cValue.backpatchFalseChain(QTInfo.size + 1);
       if (breakIndex > 0){
           qtList.QTList.get(breakIndex-1).setResult(QTInfo.size + 1);
           return;
       } else if(breakIndex < 0){
           qtList.QTList.get((-breakIndex)-1).setResult(index+1);
       }
       loop -= 1;
    }
    | "do" {loop += 1;index = QTInfo.size;} "{" (breakIndex = SentenceBlock())+ "}" "while" "(" cValue = Condition() ")" ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        cValue.backpatchTrueChain(index + 1);
        cValue.backpatchFalseChain(QTInfo.size + 1);
        if (breakIndex > 0){
            qtList.QTList.get(breakIndex-1).setResult(QTInfo.size + 1);
            return;
        } else if(breakIndex < 0){
            qtList.QTList.get((-breakIndex)-1).setResult(index+1);
        }
        loop -= 1;
    }
    | "for" "(" ( (type = Type() {first=true;})? ch = AssignmentSentence(first) {
        if (first){
            if (!(OptionTable.ot.containsKey(ch)))
                OptionTable.ot.put(ch,type);
            else
                new ErrorInfo(ErrorInfo.variable_duplicate_declaration,jj_input_stream.getEndLine(),jj_input_stream.getEndColumn(),ch);
        }
    })? ";"
    ({index = QTInfo.size;} cValue = Condition() )? ";"
    ( {threeConditionIndex = QTInfo.size;} AssignmentSentence(false)
    {
        for(int i=QTInfo.size-1;i>=threeConditionIndex;i--)
        {
            qtList1.addQTInfo(qtList.get(i));
            qtList.QTList.remove(i);
            QTInfo.size -= 1;
        }
    })?
    ")"
    {
        loop += 1;
        //\u7481\u677f\u7d8d\u7487\ue15e\u5f5e\u9367\u6943\ue0c7\u6d93\ufffd\u6d93\ue044\u6d13\u934f\u51a8\u7d21\u951b\u5c7c\u8d1f\u5bee\u54c4\u57d7\u74ba\u5ba0\u6d46\u934b\u6c2c\u566f\u6fb6\ufffd
        if (index == -1)
            index = QTInfo.size;
        //\u9365\u70b2\uff5e\u93c9\u2032\u6b22\u942a\u71b7\u56ad\u9359\ufffd
        if (cValue != null)
            cValue.backpatchTrueChain(QTInfo.size + 1);
    }
    breakIndex = SentenceBlock()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        //\u7ed7\ue0ff\u7b01\u6d93\ue047\u3003\u6748\u60e7\u7d21\u9428\u52eb\u6e74\u9367\ufffd
        int k = 0;
        //\u5a23\u8bf2\u59defor\u5bf0\ue046\u5e46\u7ed7\ue0ff\u7b01\u6d93\ue045\u6f6f\u6d60\ufffd
        if (threeConditionIndex != -1)
            k = QTInfo.size+1;
            for(int i=qtList1.QTList.size()-1;i>=0;i--){
                QTInfo q = qtList1.get(i);
                q.setInnerId(QTInfo.size+1);
                qtList.addQTInfo(q);
                QTInfo.size += 1;
            }
        //\u7f01\u64b4\u6f6b\u935a\u5ea1\u5df1\u9352\u60f0\u70e6\u675e\ufffd
        qtList.addQTInfo(new QTInfo("j","_","_",index+1));
        //\u9365\u70b2\uff5e\u93c9\u2032\u6b22\u934b\u56e7\u56ad\u9359\ufffd
        if (cValue != null)
            cValue.backpatchFalseChain(QTInfo.size + 1);
        if (breakIndex > 0){
            qtList.QTList.get(breakIndex-1).setResult(QTInfo.size + 1);
        } else if(breakIndex < 0){
            qtList.QTList.get((-breakIndex)-1).setResult(k);
        }
        loop -= 1;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


String Expression(String j) :
{/*@bgen(jjtree) Expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s = null;
Token op = null;
String arg1 = null;
//\u9353\u5d87\u7d11\u6d93\u7be2rue\u951b\u5c7d\u6097\u7f02\ufffd\u6d93\u7bcealse
Boolean prev = true;
String fu = null;}
{/*@bgen(jjtree) Expression */
try {
/*@egen*/
(
   LOOKAHEAD(2)
  s = AdditiveExpression()
  |
  ( arg1 = Identifier() ( op = "++" | op = "--") {prev = false;} | ( op = "++" | op =  "--") arg1 = Identifier())
  {
       //j = ++i (+,i,1,T) (=,T,_,i) (=,i,_,j)
       //j = i++ (=,i,_,j) (+,i,1,T) (=,T,_,i)
      if (op.image.equals("++"))
          fu = "+";
      else
          fu = "-";
      if (prev){
          String T = VariableNameGenerator.genVariableName();
          qtList.addQTInfo(new QTInfo(fu,arg1,"1",T));
          qtList.addQTInfo(new QTInfo("=",T,"_",arg1));
          s = arg1;
      } else {
          qtList.addQTInfo(new QTInfo("=",arg1,"_",j));
          String T = VariableNameGenerator.genVariableName();
          qtList.addQTInfo(new QTInfo(fu,arg1,"1",T));
          qtList.addQTInfo(new QTInfo("=",T,"_",arg1));
      }
  }
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/

  {return s;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

String AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String arg1 = null;
 String arg2 = null;
 String T1 = null;
 Token arg0 = null;}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  arg1 = MultiplicativeExpression()
  {T1 = arg1;}
  (
    (
     arg0 =  "+"
    | arg0 =  "-"
    )
   arg2 =  MultiplicativeExpression()
   {
         T1 = VariableNameGenerator.genVariableName();
         QTInfo qtInfo = new  QTInfo(arg0.image,arg1,arg2,T1);
         qtList.addQTInfo(qtInfo);
         arg1 = T1;
       }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
      return T1;
     }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String arg1 = null;
String arg2 = null;
String T1 = null;
Token arg0 = null;}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  arg1 = UnaryExpression()
  {T1 = arg1;}
  (
    (
     arg0 =  "*"
    | arg0 =  "/"
    | arg0 =  "%"
    )
    arg2 = UnaryExpression()
    {
        T1 = VariableNameGenerator.genVariableName();
        QTInfo qtInfo = new  QTInfo(arg0.image,arg1,arg2,T1);
        qtList.addQTInfo(qtInfo);
        arg1 = T1;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return T1;
   }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String s = null;}
{/*@bgen(jjtree) UnaryExpression */
try {
/*@egen*/
(  "(" s = Expression("") ")"
 | s = Identifier()
 | s = Integer()
 )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return s;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

String Identifier() :
{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t = null;}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Integer() :
{/*@bgen(jjtree) Integer */
 SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
    }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}