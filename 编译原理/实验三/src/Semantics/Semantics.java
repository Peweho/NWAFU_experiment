/* Generated By:JJTree&JavaCC: Do not edit this line. Semantics.java */
package Semantics;

import util.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

public class Semantics/*@bgen(jjtree)*/implements SemanticsTreeConstants, SemanticsConstants {/*@bgen(jjtree)*/
    protected JJTSemanticsState jjtree = new JJTSemanticsState();public QTList qtList = new QTList();
    public void printQTTable(FileOutputStream out){
        qtList.printQTTable(out);
    }
    public static void main(String[] args) throws ParseException, FileNotFoundException {
        String path = "./src/testFile/test3/";
        FileInputStream in = new FileInputStream(path.concat("test.txt"));
        FileOutputStream out = new FileOutputStream(path.concat("out.txt"));
        Semantics parser = new Semantics(in);

        try
        {
            SimpleNode n = parser.Start();
//            System.out.println("语法树：");
//            n.dump(" ");
//            System.out.println("四元式：");
            parser.printQTTable(out);
            System.out.println("Thank you.");
        }
        catch (Exception e)
        {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
        }
    }

    final public SimpleNode Start() throws ParseException {
        /*@bgen(jjtree) Start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Program();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return jjtn000;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void Program() throws ParseException {
        /*@bgen(jjtree) Program */
        SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Type();
            jj_consume_token(MAIN);
            jj_consume_token(SLBRACKET);
            jj_consume_token(SRBRACKET);
            jj_consume_token(LLBRACKET);
            label_1:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case IF:
                    case INT:
                    case WHILE:
                    case VOID:
                    case DOUBLE:
                    case LLBRACKET:
                    case IDENTIFIER:
                        ;
                        break;
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                SentenceBlock();
            }
            jj_consume_token(LRBRACKET);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SentenceBlock() throws ParseException {
        /*@bgen(jjtree) SentenceBlock */
        SimpleNode jjtn000 = new SimpleNode(JJTSENTENCEBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case IF:
                case INT:
                case WHILE:
                case VOID:
                case DOUBLE:
                case IDENTIFIER:
                    Sentence();
                    break;
                case LLBRACKET:
                    jj_consume_token(LLBRACKET);
                    label_2:
                    while (true) {
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case IF:
                            case INT:
                            case WHILE:
                            case VOID:
                            case DOUBLE:
                            case LLBRACKET:
                            case IDENTIFIER:
                                ;
                                break;
                            default:
                                jj_la1[1] = jj_gen;
                                break label_2;
                        }
                        SentenceBlock();
                    }
                    jj_consume_token(LRBRACKET);
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Sentence() throws ParseException {
        /*@bgen(jjtree) Sentence */
        SimpleNode jjtn000 = new SimpleNode(JJTSENTENCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case INT:
                case VOID:
                case DOUBLE:
                case IDENTIFIER:
                    SequenceSentence();
                    break;
                case IF:
                    ConditionSentence();
                    break;
                case WHILE:
                    LoopSentence();
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void SequenceSentence() throws ParseException {
        /*@bgen(jjtree) SequenceSentence */
        SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCESENTENCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case INT:
                case VOID:
                case DOUBLE:
                    StatementSentence();
                    break;
                case IDENTIFIER:
                    AssignmentSentence();
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(SEMI);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void StatementSentence() throws ParseException {
        /*@bgen(jjtree) StatementSentence */
        SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTSENTENCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Type();
            Identifier();
            label_3:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case COMMA:
                        ;
                        break;
                    default:
                        jj_la1[5] = jj_gen;
                        break label_3;
                }
                jj_consume_token(COMMA);
                Identifier();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void Type() throws ParseException {
        /*@bgen(jjtree) Type */
        SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case INT:
                    jj_consume_token(INT);
                    break;
                case DOUBLE:
                    jj_consume_token(DOUBLE);
                    break;
                case VOID:
                    jj_consume_token(VOID);
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void AssignmentSentence() throws ParseException {
        /*@bgen(jjtree) AssignmentSentence */
        SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTSENTENCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String arg1 = null;
        String result = null;
        try {
            result = Identifier();
            jj_consume_token(40);
            arg1 = Expression();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            QTInfo qtInfo = new  QTInfo("=",arg1,"_",result);
            qtList.addQTInfo(qtInfo);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void ConditionSentence() throws ParseException {
        /*@bgen(jjtree) ConditionSentence */
        SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONSENTENCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ConditionValue cValue = new ConditionValue();
        int index = 0;
        try {
            jj_consume_token(IF);
            jj_consume_token(SLBRACKET);
            cValue = Condition();
            jj_consume_token(SRBRACKET);
            cValue.backpatchTrueChain(QTInfo.size + 1);
            SentenceBlock();
            cValue.backpatchFalseChain(QTInfo.size+1);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case ELSE:
                    jj_consume_token(ELSE);
                    QTInfo qtInfo = new QTInfo("j","_","_","");
                    qtList.addQTInfo(qtInfo);
                    index = QTInfo.size;
                    cValue.backpatchFalseChain(QTInfo.size+1);
                    SentenceBlock();
                    QTInfo qtinfo = qtList.get(index-1);
                    qtinfo.setResult(QTInfo.size+1);
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public ConditionValue Condition() throws ParseException {
        /*@bgen(jjtree) Condition */
        SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
        String e1 = null;
        String e2 = null;
        ConditionValue cValue = new ConditionValue();
        try {
            e1 = Expression();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case RELATION_OPERATORS:
                    op = jj_consume_token(RELATION_OPERATORS);
                    e2 = Expression();
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
            if (op == null) {
                QTInfo qtInfo = new QTInfo("jnz",e1,"_","T");
                qtList.addQTInfo(qtInfo);
                cValue.mergeTrue(qtInfo);

            }else{
                QTInfo qtInfo = new QTInfo("j".concat(op.image),e1,e2,"T");
                qtList.addQTInfo(qtInfo);
                cValue.mergeTrue(qtInfo);
            }

            QTInfo qtInfo1 = new QTInfo("j","_","_","F");
            qtList.addQTInfo(qtInfo1);
            cValue.mergeFalse(qtInfo1);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return cValue;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void LoopSentence() throws ParseException {
        /*@bgen(jjtree) LoopSentence */
        SimpleNode jjtn000 = new SimpleNode(JJTLOOPSENTENCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ConditionValue cValue = new ConditionValue();
        int index = 0;
        try {
            jj_consume_token(WHILE);
            jj_consume_token(SLBRACKET);
            index = QTInfo.size;
            cValue = Condition();
            jj_consume_token(SRBRACKET);
            cValue.backpatchTrueChain(QTInfo.size + 1);
            SentenceBlock();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            QTInfo qtInfo = new QTInfo("j","_","_",index);
            qtList.addQTInfo(qtInfo);
            cValue.backpatchFalseChain(QTInfo.size + 1);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public String Expression() throws ParseException {
        /*@bgen(jjtree) Expression */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String s = null;
        try {
            s = AdditiveExpression();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return s;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public String AdditiveExpression() throws ParseException {
        /*@bgen(jjtree) AdditiveExpression */
        SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String arg1 = null;
        String arg2 = null;
        String T1 = null;
        Token arg0 = null;
        try {
            arg1 = MultiplicativeExpression();
            T1 = arg1;
            label_4:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case ADD:
                    case SUB:
                        ;
                        break;
                    default:
                        jj_la1[9] = jj_gen;
                        break label_4;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case ADD:
                        arg0 = jj_consume_token(ADD);
                        break;
                    case SUB:
                        arg0 = jj_consume_token(SUB);
                        break;
                    default:
                        jj_la1[10] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                arg2 = MultiplicativeExpression();
                T1 = VariableNameGenerator.genVariableName();
                QTInfo qtInfo = new  QTInfo(arg0.image,arg1,arg2,T1);
                qtList.addQTInfo(qtInfo);
                arg1 = T1;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return T1;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public String MultiplicativeExpression() throws ParseException {
        /*@bgen(jjtree) MultiplicativeExpression */
        SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String arg1 = null;
        String arg2 = null;
        String T1 = null;
        Token arg0 = null;
        try {
            arg1 = UnaryExpression();
            T1 = arg1;
            label_5:
            while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case MUL:
                    case DIV:
                    case 41:
                        ;
                        break;
                    default:
                        jj_la1[11] = jj_gen;
                        break label_5;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case MUL:
                        arg0 = jj_consume_token(MUL);
                        break;
                    case DIV:
                        arg0 = jj_consume_token(DIV);
                        break;
                    case 41:
                        arg0 = jj_consume_token(41);
                        break;
                    default:
                        jj_la1[12] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                arg2 = UnaryExpression();
                T1 = VariableNameGenerator.genVariableName();
                QTInfo qtInfo = new  QTInfo(arg0.image,arg1,arg2,T1);
                qtList.addQTInfo(qtInfo);
                arg1 = T1;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return T1;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public String UnaryExpression() throws ParseException {
        /*@bgen(jjtree) UnaryExpression */
        SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String s = null;
        try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SLBRACKET:
                    jj_consume_token(SLBRACKET);
                    s = Expression();
                    jj_consume_token(SRBRACKET);
                    break;
                case IDENTIFIER:
                    s = Identifier();
                    break;
                case INTEGER_LITERAL:
                    s = Integer();
                    break;
                default:
                    jj_la1[13] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return s;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public String Identifier() throws ParseException {
        /*@bgen(jjtree) Identifier */
        SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = null;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return t.image;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public String Integer() throws ParseException {
        /*@bgen(jjtree) Integer */
        SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = null;
        try {
            t = jj_consume_token(INTEGER_LITERAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return t.image;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /** Generated Token Manager. */
    public SemanticsTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[14];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0xd2800,0xd2800,0xd2800,0xd2800,0xc2000,0x20000000,0xc2000,0x1000,0x2000000,0xa00000,0xa00000,0x1400000,0x1400000,0x80000080,};
    }
    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] {0x28,0x28,0x28,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x20,};
    }

    /** Constructor with InputStream. */
    public Semantics(java.io.InputStream stream) {
        this(stream, null);
    }
    /** Constructor with InputStream and supplied encoding */
    public Semantics(java.io.InputStream stream, String encoding) {
        try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source = new SemanticsTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    }

    /** Constructor. */
    public Semantics(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new SemanticsTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    }

    /** Constructor with generated Token Manager. */
    public Semantics(SemanticsTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(SemanticsTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List jj_expentries = new java.util.ArrayList();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[42];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 14; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1<<j)) != 0) {
                        la1tokens[32+j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 42; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[])jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

}
