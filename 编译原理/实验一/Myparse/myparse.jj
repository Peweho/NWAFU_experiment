// MyParser.jj

options {
  STATIC = false; // 是否生成静态解析器
}

// 定义语法规则
PARSER_BEGIN(MyParser)

package Myparse;

public class MyParser {
  public static void main(String[] args) throws ParseException {
    MyParser parser = new MyParser(System.in);
    parser.Start();
  }
}

PARSER_END(MyParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])?
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}
TOKEN : /*KEYWORDS*/
{
  < IF : "if" > |
  < ELSE : "else" > |
  < INT : "int" > |
  < RETURN : "return" > |
  < DO : "do" > |
  < WHILE : "while" > |
  < STRUCT : "struct" > |
  < VOID : "void" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /*operators*/
{
  < ADD : "+" > |
  < MUL : "*" > |
  < SUB : "-" > |
  < DIV : "/" > |
  < GREAT : ">" > |
  < LESS : "<" > |
  < EQUAL : "=" >
}

TOKEN : /*separators*/
{
  < COMMA : "," > |
  < SEMI : ";" > |
  < SLBRACKET : "(" > |
  < SRBRACKET : ")" > |
  < MLBRACKET : "[" > |
  < MRBRACKET : "]" > |
  < LLBRACKET : "{" > |
  < LRBRACKET : "}" >
}