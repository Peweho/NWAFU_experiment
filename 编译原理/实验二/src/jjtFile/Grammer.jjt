options {
  STATIC = false; // 是否生成静态解析器
}

// 定义语法规则
PARSER_BEGIN(Grammer)
package jjtFile;

public class Grammer {
  public static void main(String[] args) throws ParseException {
        FileInputStream in = new FileInputStream("./testFile/test1.txt");
        Grammer parser = new Grammer(in);
        try
        {
          SimpleNode n = parser.Start();
          n.dump("=");
          System.out.println("Thank you.");
        }
        catch (Exception e)
        {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
        }
  }
}

PARSER_END(Grammer)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])?
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /*KEYWORDS*/
{
  < KEYWORD : < INT> | < VOID>  | < FLOAT> | < DOUBLE> | <STRUCT> > |
  < #FLOAT : "float"> |
  < #DOUBLE : "double"> |
  < IF : "if" > |
  < ELSE : "else" > |
  < #INT : "int" > |
  < RETURN : "return" > |
  < DO : "do" > |
  < WHILE : "while" > |
  < #STRUCT : "struct" > |
  < #VOID : "void" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /*operators*/
{
  < ADD : "+" > |
  < MUL : "*" > |
  < SUB : "-" > |
  < DIV : "/" > |
  < ASSIGNMENT : "=" >
}

TOKEN : /*operators*/
{
  < RELATION_OPERATORS :  < GREAT> |
                           < LESS > |
                           < EQUAL > > |
  < #GREAT : ">" > |
  < #LESS : "<" > |
  < #EQUAL : "==" >
}

TOKEN : /*separators*/
{
//  < SEPARATORS :   < COMMA > |
//                   < SEMI > |
//                   < SLBRACKET  > |
//                   < SRBRACKET > |
//                   < MLBRACKET  > |
//                   < MRBRACKET  > |
//                   < LLBRACKET  > |
//                   < LRBRACKET  > > |
  < COMMA : "," > |
  < SEMI : ";" > |
  < SLBRACKET : "(" > |
  < SRBRACKET : ")" > |
  < MLBRACKET : "[" > |
  < MRBRACKET : "]" > |
  < LLBRACKET : "{" > |
  < LRBRACKET : "}" >
}

SimpleNode Start() :
{}
{
  Procedure()
  {
    return jjtThis;
  }
}

void Procedure() :
{}
{
    <KEYWORD> Identifier() "(" ")" "{" (SentenceBlock())* "}"
}

void SentenceBlock():
{}
{
    Sentence() |
    "{" (SentenceBlock())* "}"
}

void Sentence() :
{}
{
    SequenceSentence() |
    ConditionSentence() |
    LoopSentence()
}

void SequenceSentence():
{}
{
    (StatementSentence() |
     AssignmentSentence() ) ";"
}

void StatementSentence() :
{}
{
    <KEYWORD> Identifier()  ("," Identifier())*
}

void AssignmentSentence():
{}
{
    Identifier()  "=" Expression()
}

void ConditionSentence():
{}
{
    <IF> "(" Condition() ")" SentenceBlock() (<ELSE> (ConditionSentence() | SentenceBlock()))?
}

void Condition():
{}
{
    Expression() <RELATION_OPERATORS> Expression()
}

void LoopSentence():
{}
{
    "while" "(" Condition() ")" SentenceBlock()
}



void Expression() :
{}
{
  AdditiveExpression()
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression()
  (
    (
      "+"
    | "-"
    )
    MultiplicativeExpression()
  )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression()
  (
    (
      "*"
    | "/"
    | "%"
    )
    UnaryExpression()
  )*
}

void UnaryExpression() :
{}
{
  "(" Expression() ")"
| Identifier()
| Integer()
}

void Identifier() :
{}
{
  < IDENTIFIER >
}

void Integer() :
{}
{
  < INTEGER_LITERAL >
}